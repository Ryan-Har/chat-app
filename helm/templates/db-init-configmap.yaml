apiVersion: v1
data:
  1create_db_tables.sql: |-
    CREATE TABLE IF NOT EXISTS "user_roles" (
            "id" serial NOT NULL UNIQUE,
            "description" varchar NOT NULL,
            CONSTRAINT "user_roles_pk" PRIMARY KEY ("id")
    ) WITH (
      OIDS=FALSE
    );

    CREATE TABLE IF NOT EXISTS "users" (
            "id" serial NOT NULL UNIQUE,
            "created_at" timestamp with time zone NOT NULL,
            "internal" BOOLEAN NOT NULL,
            CONSTRAINT "users_pk" PRIMARY KEY ("id")
    ) WITH (
      OIDS=FALSE
    );

    CREATE TABLE IF NOT EXISTS "external_users" (
            "id" serial NOT NULL,
            "user_id" integer NOT NULL,
            "name" varchar,
            "email" varchar,
            "ip_address" varchar,
            CONSTRAINT "external_users_pk" PRIMARY KEY ("id")
    ) WITH (
      OIDS=FALSE
    );

    CREATE TABLE IF NOT EXISTS "internal_users" (
            "id" serial NOT NULL,
            "user_id" integer NOT NULL,
            "role_id" integer NOT NULL,
            "firstname" varchar NOT NULL,
            "surname" varchar NOT NULL,
            "email" varchar NOT NULL,
            "password" varchar NOT NULL,
            CONSTRAINT "internal_users_pk" PRIMARY KEY ("id")
    ) WITH (
      OIDS=FALSE
    );


    CREATE TABLE IF NOT EXISTS "chat" (
            "uuid" uuid NOT NULL UNIQUE,
            "start_time" timestamp with time zone NOT NULL,
            "end_time" timestamp with time zone,
            CONSTRAINT "chat_pk" PRIMARY KEY ("uuid")
    ) WITH (
      OIDS=FALSE
    );

    CREATE TABLE IF NOT EXISTS "chat_messages" (
            "id" serial NOT NULL UNIQUE,
            "chat_uuid" uuid NOT NULL,
            "user_id_from" integer NOT NULL,
            "message" varchar NOT NULL,
            "timestamp" timestamp with time zone,
            CONSTRAINT "chat_messages_pk" PRIMARY KEY ("id")
    ) WITH (
      OIDS=FALSE
    );

    ALTER TABLE "internal_users" ADD CONSTRAINT "internal_users_user_id" FOREIGN KEY ("user_id") REFERENCES "users"("id");
    ALTER TABLE "internal_users" ADD CONSTRAINT "internal_users_role_id" FOREIGN KEY ("role_id") REFERENCES "user_roles"("id");
    ALTER TABLE "external_users" ADD CONSTRAINT "external_users_user_id" FOREIGN KEY ("user_id") REFERENCES "users"("id");
    ALTER TABLE "chat_messages" ADD CONSTRAINT "chat_messages_uuid" FOREIGN KEY ("chat_uuid") REFERENCES "chat"("uuid");
    ALTER TABLE "chat_messages" ADD CONSTRAINT "chat_messages_user_id" FOREIGN KEY ("user_id_from") REFERENCES "users"("id");
  2functions.sql: "--name, ip\ncreate or replace function add_external_user(\n    provided_name
    VARCHAR, \n    provided_ip VARCHAR)\nreturns INTEGER\nas\n$$\nDECLARE user_id_response
    INTEGER;\nBEGIN\nINSERT INTO users (created_at, internal) VALUES (CURRENT_TIMESTAMP,
    FALSE) RETURNING id INTO user_id_response;\nINSERT INTO external_users (user_id,
    name, ip_address) VALUES (user_id_response, provided_name, provided_ip);\nRETURN
    user_id_response;\nEND;\n$$\nlanguage plpgsql;\n\nCREATE OR REPLACE FUNCTION update_external_user_info(\n
    \   current_user_id INT,\n    new_name VARCHAR,\n    new_ip_address VARCHAR,\n
    \   new_email VARCHAR\n) RETURNS TABLE (\n\tgiven_user_id INT,\n\tupdated_name
    VARCHAR,\n\tupdated_ip_address VARCHAR,\n\tupdated_email VARCHAR\n) AS $$\n\t\nDECLARE\n\toriginal_name
    VARCHAR;\n\toriginal_ip_address VARCHAR;\n\toriginal_email VARCHAR;\n\nBEGIN\n\n
    \ -- Retrieve current values for return\n    SELECT COALESCE(name, ''),\n           COALESCE(ip_address,
    ''),\n           COALESCE(email, '')\n\tINTO original_name, original_ip_address,
    original_email\n    FROM external_users WHERE user_id = $1;\n\n    IF NOT FOUND
    THEN\n        RAISE EXCEPTION 'record not found';\n    END IF;\n\n  UPDATE external_users\n
    \ SET\n      name = COALESCE(NULLIF(new_name, ''), original_name),\n      ip_address
    = COALESCE(NULLIF(new_ip_address, ''), original_ip_address),\n      email = COALESCE(NULLIF(new_email,
    ''), original_email)\n  WHERE user_id = $1;\n\n  RETURN QUERY (\n\t  SELECT\n\t
    \ current_user_id as given_user_id, \n      COALESCE(NULLIF(new_name, '')::VARCHAR,
    original_name) as updated_name,\n      COALESCE(NULLIF(new_ip_address, '')::VARCHAR,
    original_ip_address) as updated_ip_address,\n      COALESCE(NULLIF(new_email,
    '')::VARCHAR, original_email) as updated_email\n  );\nEND;\n$$ LANGUAGE plpgsql;\n\n\ncreate
    or replace function add_internal_user(\n\tprovided_role_id INT,\n\tprovided_firstname
    VARCHAR,\n\tprovided_surname VARCHAR,\n\tprovided_email VARCHAR,\n\thashed_password
    VARCHAR)\nreturns INTEGER\nas\n$$\nDECLARE user_id_response INTEGER;\nBEGIN\nINSERT
    INTO users (created_at, internal) VALUES (CURRENT_TIMESTAMP, TRUE) RETURNING id
    INTO user_id_response;\nINSERT INTO internal_users (user_id, role_id, firstname,
    surname, email, password) VALUES (user_id_response, provided_role_id, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t
    \  provided_firstname, provided_surname,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t
    \ provided_email, hashed_password);\nRETURN user_id_response;\nEND;\n$$\nlanguage
    plpgsql;\n\nCREATE OR REPLACE FUNCTION update_internal_user_info(\n    current_user_id
    INT,\n    new_role_id INT,\n    new_firstname VARCHAR,\n    new_surname VARCHAR,\n
    \   new_email VARCHAR,\n    new_password VARCHAR\n) RETURNS TABLE (\n\tgiven_user_id
    INT,\n    updated_role_id INT,\n\tupdated_firstname VARCHAR,\n    updated_surname
    VARCHAR,\n\tupdated_email VARCHAR,\n\tupdated_password VARCHAR\n) AS $$\n\t\nDECLARE\n\toriginal_role_id
    INT;\n    original_firstname VARCHAR;\n    original_surname VARCHAR;\n    original_email
    VARCHAR;\n    original_password VARCHAR;\n\nBEGIN\n\n  -- Retrieve current values
    for return\n    SELECT role_id, firstname, surname, email, password\n\tINTO original_role_id,
    original_firstname, original_surname, original_email, original_password\n    FROM
    internal_users WHERE user_id = $1;\n\n    IF NOT FOUND THEN\n        RAISE EXCEPTION
    'record not found';\n    END IF;\n\n  UPDATE internal_users\n  SET\n      role_id
    = COALESCE(NULLIF(new_role_id, 0), original_role_id),\n      firstname = COALESCE(NULLIF(new_firstname,
    ''), original_firstname),\n      surname = COALESCE(NULLIF(new_surname, ''), original_surname),\n
    \     email = COALESCE(NULLIF(new_email, ''), original_email),\n      password
    = COALESCE(NULLIF(new_password, ''), original_password)\n  WHERE user_id = $1;\n\n
    \ RETURN QUERY (\n\t  SELECT\n\t  current_user_id as given_user_id, \n      COALESCE(NULLIF(new_role_id,
    0)::INT, original_role_id) as updated_role_id,\n      COALESCE(NULLIF(new_firstname,
    '')::VARCHAR, original_firstname) as updated_firstname,\n      COALESCE(NULLIF(new_surname,
    '')::VARCHAR, original_surname) as updated_surname,\n      COALESCE(NULLIF(new_email,
    '')::VARCHAR, original_email) as updated_email,\n      COALESCE(NULLIF(new_password,
    '')::VARCHAR, original_password) as updated_password\n  );\nEND;\n$$ LANGUAGE
    plpgsql;"
  3create_admin.sql: |-
    insert into user_roles (id, description) values (1, 'admin')
    on conflict do nothing;

    insert into users (id, created_at, internal) values (1, CURRENT_TIMESTAMP, true)
    on conflict do nothing;

    insert into internal_users (user_id, role_id, firstname, surname, email, password)
    values (1, 1, 'admin', 'user', 'admin@example.com', 'password')
    on conflict do nothing;

    SELECT SETVAL((SELECT PG_GET_SERIAL_SEQUENCE('"users"', 'id')), (SELECT (MAX("id") + 1) FROM "users"), FALSE);
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: init-scripts
