// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Ryan-Har/chat-app/src/api/dbquery (interfaces: DBQueryHandler)

// Package mock_dbquery is a generated GoMock package.
package mock_dbquery

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDBQueryHandler is a mock of DBQueryHandler interface.
type MockDBQueryHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBQueryHandlerMockRecorder
}

// MockDBQueryHandlerMockRecorder is the mock recorder for MockDBQueryHandler.
type MockDBQueryHandlerMockRecorder struct {
	mock *MockDBQueryHandler
}

// NewMockDBQueryHandler creates a new mock instance.
func NewMockDBQueryHandler(ctrl *gomock.Controller) *MockDBQueryHandler {
	mock := &MockDBQueryHandler{ctrl: ctrl}
	mock.recorder = &MockDBQueryHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBQueryHandler) EXPECT() *MockDBQueryHandlerMockRecorder {
	return m.recorder
}

// AddExternalUser mocks base method.
func (m *MockDBQueryHandler) AddExternalUser(arg0, arg1 string) ([][]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExternalUser", arg0, arg1)
	ret0, _ := ret[0].([][]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddExternalUser indicates an expected call of AddExternalUser.
func (mr *MockDBQueryHandlerMockRecorder) AddExternalUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExternalUser", reflect.TypeOf((*MockDBQueryHandler)(nil).AddExternalUser), arg0, arg1)
}

// AddInternalUser mocks base method.
func (m *MockDBQueryHandler) AddInternalUser(arg0 int64, arg1, arg2, arg3, arg4 string) ([][]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInternalUser", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([][]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddInternalUser indicates an expected call of AddInternalUser.
func (mr *MockDBQueryHandlerMockRecorder) AddInternalUser(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInternalUser", reflect.TypeOf((*MockDBQueryHandler)(nil).AddInternalUser), arg0, arg1, arg2, arg3, arg4)
}

// AddMessageByUUID mocks base method.
func (m *MockDBQueryHandler) AddMessageByUUID(arg0 string, arg1 int64, arg2, arg3 string) ([][]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessageByUUID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([][]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMessageByUUID indicates an expected call of AddMessageByUUID.
func (mr *MockDBQueryHandlerMockRecorder) AddMessageByUUID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessageByUUID", reflect.TypeOf((*MockDBQueryHandler)(nil).AddMessageByUUID), arg0, arg1, arg2, arg3)
}

// ChatEnd mocks base method.
func (m *MockDBQueryHandler) ChatEnd(arg0, arg1 string) ([][]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatEnd", arg0, arg1)
	ret0, _ := ret[0].([][]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatEnd indicates an expected call of ChatEnd.
func (mr *MockDBQueryHandlerMockRecorder) ChatEnd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatEnd", reflect.TypeOf((*MockDBQueryHandler)(nil).ChatEnd), arg0, arg1)
}

// ChatStart mocks base method.
func (m *MockDBQueryHandler) ChatStart(arg0, arg1 string) ([][]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatStart", arg0, arg1)
	ret0, _ := ret[0].([][]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatStart indicates an expected call of ChatStart.
func (mr *MockDBQueryHandlerMockRecorder) ChatStart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatStart", reflect.TypeOf((*MockDBQueryHandler)(nil).ChatStart), arg0, arg1)
}

// GetAllChatsInProgress mocks base method.
func (m *MockDBQueryHandler) GetAllChatsInProgress() ([][]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllChatsInProgress")
	ret0, _ := ret[0].([][]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllChatsInProgress indicates an expected call of GetAllChatsInProgress.
func (mr *MockDBQueryHandlerMockRecorder) GetAllChatsInProgress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllChatsInProgress", reflect.TypeOf((*MockDBQueryHandler)(nil).GetAllChatsInProgress))
}

// GetAllMessagesByUUID mocks base method.
func (m *MockDBQueryHandler) GetAllMessagesByUUID(arg0 string) ([][]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMessagesByUUID", arg0)
	ret0, _ := ret[0].([][]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMessagesByUUID indicates an expected call of GetAllMessagesByUUID.
func (mr *MockDBQueryHandlerMockRecorder) GetAllMessagesByUUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMessagesByUUID", reflect.TypeOf((*MockDBQueryHandler)(nil).GetAllMessagesByUUID), arg0)
}

// GetExternalUser mocks base method.
func (m *MockDBQueryHandler) GetExternalUser(arg0, arg1 string) ([][]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalUser", arg0, arg1)
	ret0, _ := ret[0].([][]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalUser indicates an expected call of GetExternalUser.
func (mr *MockDBQueryHandlerMockRecorder) GetExternalUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalUser", reflect.TypeOf((*MockDBQueryHandler)(nil).GetExternalUser), arg0, arg1)
}

// GetExternalUserByID mocks base method.
func (m *MockDBQueryHandler) GetExternalUserByID(arg0 int64) ([][]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalUserByID", arg0)
	ret0, _ := ret[0].([][]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalUserByID indicates an expected call of GetExternalUserByID.
func (mr *MockDBQueryHandlerMockRecorder) GetExternalUserByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalUserByID", reflect.TypeOf((*MockDBQueryHandler)(nil).GetExternalUserByID), arg0)
}

// GetInternalUserByID mocks base method.
func (m *MockDBQueryHandler) GetInternalUserByID(arg0 int64) ([][]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInternalUserByID", arg0)
	ret0, _ := ret[0].([][]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInternalUserByID indicates an expected call of GetInternalUserByID.
func (mr *MockDBQueryHandlerMockRecorder) GetInternalUserByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInternalUserByID", reflect.TypeOf((*MockDBQueryHandler)(nil).GetInternalUserByID), arg0)
}

// UpdateExternalUserByID mocks base method.
func (m *MockDBQueryHandler) UpdateExternalUserByID(arg0 int64, arg1, arg2, arg3 string) ([][]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExternalUserByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([][]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExternalUserByID indicates an expected call of UpdateExternalUserByID.
func (mr *MockDBQueryHandlerMockRecorder) UpdateExternalUserByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalUserByID", reflect.TypeOf((*MockDBQueryHandler)(nil).UpdateExternalUserByID), arg0, arg1, arg2, arg3)
}

// UpdateInternalUserByID mocks base method.
func (m *MockDBQueryHandler) UpdateInternalUserByID(arg0, arg1 int64, arg2, arg3, arg4, arg5 string) ([][]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInternalUserByID", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([][]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInternalUserByID indicates an expected call of UpdateInternalUserByID.
func (mr *MockDBQueryHandlerMockRecorder) UpdateInternalUserByID(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInternalUserByID", reflect.TypeOf((*MockDBQueryHandler)(nil).UpdateInternalUserByID), arg0, arg1, arg2, arg3, arg4, arg5)
}
