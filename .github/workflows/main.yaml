name: Build and Deploy

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  check-merge:
    if: github.event.pull_request.merged == true
    runs-on: self-hosted

    env:
      WORKING_DIR: ${{ github.workspace }}
      REPO_NAME: ${{ github.repository }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: yq - portable yaml processor
        uses: mikefarah/yq@v4.43.1

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
      
      - name: Pull current helm chart
        run: |
          cd $WORKING_DIR
          helm pull oci://registry-1.docker.io/pandects/chat-app-helm --untar
      
      - name: Check PR source branch
        id: check_source
        run: echo "::set-output name=source::${GITHUB_EVENT_PATH}"

      - name: Execute job based on origin
        id: execute_job
        run: |
          if [[ "$(echo ${{ steps.check_source.outputs.source }} | jq '.pull_request.head.ref')" == "\"feature-"* ]]; then
            echo "This PR originated from a feature branch."
            echo "::set-output name=job_type::feature"
          elif [[ "$(echo ${{ steps.check_source.outputs.source }} | jq '.pull_request.head.ref')" == "\"patch-"* ]]; then
            echo "This PR originated from a patch branch."
            echo "::set-output name=job_type::patch"
          elif [[ "$(echo ${{ steps.check_source.outputs.source }} | jq '.pull_request.head.ref')" == "\"upgrade-"* ]]; then
            echo "This PR originated from an upgrade branch."
            echo "::set-output name=job_type::upgrade"
          else
            echo "Unknown source branch."
            exit 1
          fi

  patch:
    needs: check-merge
    runs-on: self-hosted
    if: ${{ jobs.check-merge.outputs.execute_job == 'patch' }}
    steps:
      - name: Generate version number
        run: |
          IFS="." read -r major minor patch <<< $(yq '.version' Chart.yaml)
          ((patch++))
          echo "::set-output name=version::$major.$minor.$patch"

  feature:
    needs: check-merge
    runs-on: self-hosted
    if: ${{ jobs.check-merge.outputs.execute_job == 'feature' }}
    steps:
      - name: Generate version number
        run: |
          IFS="." read -r major minor patch <<< $(yq '.version' Chart.yaml)
          ((minor++))
          patch=0
          echo "::set-output name=version::$major.$minor.$patch"

  upgrade:
    needs: check-merge
    runs-on: self-hosted
    if: ${{ jobs.check-merge.outputs.execute_job == 'upgrade' }}
    steps:
      - name: Generate version number
        run: |
          IFS="." read -r major minor patch <<< $(yq '.version' Chart.yaml)
          ((major++))
          minor=0
          patch=0
          echo "::set-output name=version::$major.$minor.$patch"

  build-and-push:
    runs-on: self-hosted
    strategy:
      matrix:
        needs_job: [patch, feature, upgrade]
    
    steps:
      - name: Get version number
        run: |
          echo "::set-output name=version::${{ needs.[{ matrix.needs_job }].outputs.version }}"

      - name: Update Helm chart values
        run: |
          cd $WORKING_DIR
          for img in $(echo api app chat consumer user); do yq -i ".${img}.deployment.imageVersion = \"${{ steps.Get_version_number.outputs.version }}\"" values.yaml; done
          yq -i ".version = \"${{ steps.Get_version_number.outputs.version }}\" | .appVersion = \"${{ steps.Get_version_number.outputs.version }}\"" Chart.yaml

      - name: Build Docker containers, tag and push
        run: |
          cd $WORKING_DIR/src
          for module in $(find . -mindepth 1 -maxdepth 1 -type d | sed 's/^\.\///'); do
            cd $module
            if [ -f Dockerfile ]; then
              docker build -t pandects/"$module":${{ steps.Get_version_number.outputs.version }} -t pandects/"$module":latest .
              docker push pandects/"$module":${{ steps.Get_version_number.outputs.version }} && docker push pandects/"$module":latest
            fi
            cd ..
          done

      - name: Package Helm Chart
        run: |
          cd $WORKING_DIR
          helm package chat-app-helm

      - name: Push Helm Chart
        run: |
          helm push ./chat-app-helm-${{ steps.Get_version_number.outputs.version }}.tgz oci://registry-1.docker.io/pandects

      - name: Upload Helm Chart Artifact
        uses: actions/upload-artifact@v4
        with:
          name: chat-app-helm-${{ steps.Get_version_number.outputs.version }}.tgz
          path: chat-app-helm-${{ steps.Get_version_number.outputs.version }}.tgz

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: ${{ steps.Get_version_number.outputs.version }}
          release_name: Chat app v${{ steps.Get_version_number.outputs.version }}

      - name: Upload Artifact as Release Asset
        run: |
          gh release upload ${{ steps.Get_version_number.outputs.version }} chat-app-helm-${{ steps.Get_version_number.outputs.version }}.tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}